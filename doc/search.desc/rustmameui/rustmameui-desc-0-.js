searchState.loadedDescShard("rustmameui", 0, "The main entry point for the MAME UI application.\nI18n backend instance\nThis module defines the <code>Game</code> struct, representing a single …\nThis module handles interactions with the MAME executable, …\nThe main function where the application starts execution.\nThis module handles the application’s configuration, …\nThis module contains the Dioxus UI code for the …\nRepresents a single game entry with its details.\nReturns the description of the game.\nA human-readable description or title for the game.\nReturns the argument unchanged.\nRetrieves the snapshot image for the game from a specified …\nCalls <code>U::from(self)</code>.\nLaunches the game using the specified MAME executable and …\nCreates a new <code>Game</code> instance.\nReturns the ROM name of the game.\nThe name of the game’s ROM file (without extension).\nReturns whether a snapshot is available for this game.\nIndicates whether a snapshot image is available for this …\nAdds a <code>Game</code> to the vector of favourites and saves the …\nParses the XML output from <code>mame -lx</code> to extract ROM names …\nExecutes the MAME executable with the <code>-lx</code> argument to get …\nLoads a vector of <code>Game</code> structs from the <code>games.json</code> file in …\nLoads a vector of favourite <code>Game</code> structs from the …\nProcesses a <code>&lt;driver&gt;</code> tag from the MAME XML output.\nRemoves a <code>Game</code> from the vector of favourites based on its …\nSaves a vector of <code>Game</code> structs to a JSON file in the …\nSorts a slice of <code>Game</code> structs alphabetically by their …\nVerifies the presence and integrity of a batch of ROM …\nVerifies the presence of snapshot images for a batch of …\nRepresents the application’s configuration settings.\nA macro to create a boxed <code>std::io::Error</code> with a custom …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe path to the MAME executable.\nCreates a new <code>Config</code> instance by loading settings from the …\nThe base directory for the application’s configuration …\nThe path to the directory containing MAME ROM files.\nSaves the current configuration settings to the application…\nThe path to the snapshot file used by the application.\nComponent for the About tab content.\nThe main application component.\nComponent for the Favourites tab content.\nProperties for the [<code>FavouritesTab</code>] component.\nComponent for the Games tab content.\nProperties for the [<code>GamesTab</code>] component.\nComponent for the Settings tab content.\nProperties for the [<code>SettingsTab</code>] component.\nEnum to represent the different tabs in the application UI.\nCreate a builder for building <code>GamesTabProps</code>. On the …\nCreate a builder for building <code>FavouritesTabProps</code>. On the …\nCreate a builder for building <code>SettingsTabProps</code>. On the …\nChecks if a native file dialog utility (zenity or kdialog) …\nThe main entry point for drawing and launching the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")