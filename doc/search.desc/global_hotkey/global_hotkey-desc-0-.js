searchState.loadedDescShard("global_hotkey", 0, "global_hotkey lets you register Global HotKeys for Desktop …\nContains the error value\nErrors returned by tray-icon.\nDescribes a global hotkey event emitted when a <code>HotKey</code> is …\nA reciever that could be used to listen to global hotkey …\nDescribes the state of the <code>HotKey</code>.\nContains the success value\nThe <code>HotKey</code> is pressed (the key is down).\nThe <code>HotKey</code> is released (the key is up).\nConvenient type alias of Result type for tray-icon.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHotKeys describe keyboard global shortcuts.\nReturns the id of the associated <code>HotKey</code>.\nId of the associated <code>HotKey</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets a reference to the event channel’s …\nSet a handler to be called for new events. Useful for …\nReturns the state of the associated <code>HotKey</code>.\nState of the associated <code>HotKey</code>.\nFound on Sun’s USB keyboard.\nAlt, Option or ⌥.\nAlt, Option or ⌥. This is labelled AltGr key on many …\n↓\n←\n→\n↑\n`~ on a US keyboard. This is the 半角/全角/漢字 (…\nUsed for both the US | (on the 101-key layout) and also …\nBackspace or ⌫. Labelled Delete on Apple keyboards.\n[{ on a US keyboard.\n]} on a US keyboard.\nNon-standard code value supported by Chromium.\nNon-standard code value supported by Chromium.\nSome laptops place this key to the left of the ↑ key.\nSome laptops place this key to the right of the ↑ key.\nCapsLock or ⇪\nCode is the physical position of a key.\n,&lt; on a US keyboard.\nThe application context menu key, which is typically found …\nControl or ⌃\nControl or ⌃\nJapanese: 変換 (henkan)\nFound on Sun’s USB keyboard.\nFound on Sun’s USB keyboard.\n⌦. The forward delete key. Note that on Apple keyboards, …\n0) on a US keyboard.\n1! on a US keyboard.\n2@ on a US keyboard.\n3# on a US keyboard.\n4$ on a US keyboard.\n5% on a US keyboard.\n6^ on a US keyboard.\n7&amp; on a US keyboard.\n8* on a US keyboard.\n9( on a US keyboard.\nNon-standard code value supported by Chromium.\nEject or ⏏. This key is placed in the function section …\nEnd or ↘\nEnter or ↵. Labelled Return on Apple keyboards.\n=+ on a US keyboard.\nEsc or ⎋\nF1\nF10\nF11\nF12\nF13\nF14\nF15\nF16\nF17\nF18\nF19\nF2\nF20\nF21\nF22\nF23\nF24\nF25\nF26\nF27\nF28\nF29\nF3\nF30\nF31\nF32\nF33\nF34\nF35\nF4\nF5\nF6\nF7\nF8\nF9\nFound on Sun’s USB keyboard.\nFn This is typically a hardware key that does not generate …\nFLock or FnLock. Function Lock key. Found on the Microsoft …\nHelp. Not present on standard PC keyboards.\nUse for dedicated ひらがな key found on some Japanese …\nHome or ↖\nA keyboard shortcut that consists of an optional …\nInsert or Ins. Not present on Apple keyboards.\nLocated between the left Shift and Z keys. Labelled | on a …\nLocated between the / and right Shift keys. Labelled \\ろ (…\nLocated between the = and Backspace keys. Labelled ¥ (yen…\nJapanese: カタカナ/ひらがな/ローマ字 (…\nUse for dedicated カタカナ key found on some Japanese …\na on a US keyboard. Labelled q on an AZERTY (e.g., French) …\nb on a US keyboard.\nc on a US keyboard.\nd on a US keyboard.\ne on a US keyboard.\nf on a US keyboard.\ng on a US keyboard.\nh on a US keyboard.\ni on a US keyboard.\nj on a US keyboard.\nk on a US keyboard.\nl on a US keyboard.\nm on a US keyboard.\nn on a US keyboard.\no on a US keyboard.\np on a US keyboard.\nq on a US keyboard. Labelled a on an AZERTY (e.g., French) …\nr on a US keyboard.\ns on a US keyboard.\nt on a US keyboard.\nu on a US keyboard.\nv on a US keyboard.\nw on a US keyboard. Labelled z on an AZERTY (e.g., French) …\nx on a US keyboard.\ny on a US keyboard. Labelled z on a QWERTZ (e.g., German) …\nz on a US keyboard. Labelled w on an AZERTY (e.g., French) …\nNon-standard code value supported by Chromium.\nKorean: HangulMode 한/영 (han/yeong)Japanese (Mac …\nKorean: Hanja 한자 (hanja)Japanese (Mac keyboard): 英数…\nJapanese (word-processing keyboard): Katakana\nJapanese (word-processing keyboard): Hiragana\nJapanese (word-processing keyboard): Zenkaku/Hankaku\nSometimes labelled My Computer on the keyboard\nSometimes labelled Calculator on the keyboard\nNon-standard code value supported by Chromium.\nNon-standard code value supported by Chromium.\nNon-standard code value supported by Chromium.\nNon-standard code value supported by Chromium.\nNon-standard code value supported by Chromium.\nNon-standard code value supported by Chromium.\nNon-standard code value supported by Chromium.\nNon-standard code value supported by Chromium.\nNon-standard code value supported by Chromium.\nNon-standard code value supported by Chromium.\nNon-standard code value supported by Chromium.\nThe Windows, ⌘, Command or other OS symbol key.\nThe Windows, ⌘, Command or other OS symbol key.\nNon-standard code value supported by Chromium.\n-_ on a US keyboard.\nPressed modifier keys.\nJapanese: 無変換 (muhenkan)\nOn the Mac, the “NumLock” code should be used for the …\n0 Ins on a keyboard0 on a phone or remote control\n1 End on a keyboard1 or 1 QZ on a phone or remote control\n2 ↓ on a keyboard2 ABC on a phone or remote control\n3 PgDn on a keyboard3 DEF on a phone or remote control\n4 ← on a keyboard4 GHI on a phone or remote control\n5 on a keyboard5 JKL on a phone or remote control\n6 → on a keyboard6 MNO on a phone or remote control\n7 Home on a keyboard7 PQRS or 7 PRS on a phone or remote …\n8 ↑ on a keyboard8 TUV on a phone or remote control\n9 PgUp on a keyboard9 WXYZ or 9 WXY on a phone or remote …\n+\nFound on the Microsoft Natural Keyboard.\nC or AC (All Clear). Also for use with numpads that have a …\nCE (Clear Entry)\n, (thousands separator). For locales where the thousands …\n. Del. For locales where the decimal separator is “,” …\n/\n=\n# on a phone or remote control device. This key is …\nM+ Add current entry to the value stored in memory.\nMC Clear the value stored in memory.\nMR Replace the current entry with the value stored in …\nMS Replace the value stored in memory with the current …\nM- Subtract current entry from the value stored in memory.\n<em> on a keyboard. For use with numpads that provide </em>…\n( Found on the Microsoft Natural Keyboard.\n) Found on the Microsoft Natural Keyboard.\n<em> on a phone or remote control device. This key is </em>…\n-\nFound on Sun’s USB keyboard.\nPage Down, PgDn or ⇟\nPage Up, PgUp or ⇞\nFound on Sun’s USB keyboard.\nPause Break\n.&gt; on a US keyboard.\nThis key is placed in the function section on some Apple …\nPrtScr SysRq or Print Screen\nNon-standard code value supported by Chromium.\nFound on Sun’s USB keyboard.\n’“ on a US keyboard.\nScroll Lock\nFound on Sun’s USB keyboard.\nNon-standard code value supported by Chromium.\n;: on a US keyboard.\nShift or ⇧\nShift or ⇧\nNon-standard code value supported by Chromium.\n/? on a US keyboard.\n  (space)\nTab or ⇥\nFound on Sun’s USB keyboard.\nThis value code should be used when no other value given …\nNon-standard code value supported by Chromium.\nGet a flags value with all known bits set.\nReturn <code>true</code> if an alt key is pressed.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturn <code>true</code> if a control key is pressed.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturns the id associated with this hotKey which is a hash …\nThe hotkey id.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this hotkey into a string.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe hotkey key.\nReturns <code>true</code> if this <code>Code</code> and <code>Modifiers</code> matches this …\nReturn <code>true</code> if a meta key is pressed.\nThe hotkey modifiers.\nCreates a new hotkey to define keyboard shortcuts …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nReturn <code>true</code> if a shift key is pressed.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.")