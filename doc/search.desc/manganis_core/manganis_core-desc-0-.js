searchState.loadedDescShard("manganis_core", 0, "A bundled asset with some options. The asset can be used …\nSettings for a generic asset\nThe size will be automatically determined from the image …\nAn avif image. Avif images can compress slightly better …\nAn asset that should be copied by the bundler with some …\nA css asset\nOptions for a css asset\nA folder asset\nThe builder for [<code>FolderAsset</code>]\nAn image asset\nOptions for an image asset\nThe type of an image. You can read more about the …\nThe size of an image asset\nA jpg image. Jpg images can contain transparency and tend …\nA javascript asset\nOptions for a javascript asset\nA manual size in pixels\nA png image. Png images cannot contain transparency and …\nAn unknown image type\nAn unknown asset\nA webp image. Webp images can contain transparency and …\nGet the absolute path of the asset source. This path will …\nGet the bundled asset\nGet the bundled name of the asset. This identifier cannot …\nTry to get the extension for the asset. If the asset …\nGet the format of the image\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUtilities for creating hashed paths to assets in Manganis. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the options into options for a generic asset\nConvert the options into options for a generic asset\nConvert the options into options for a generic asset\nConvert the options into options for a generic asset\nConvert the options into options for a generic asset\nUtilities for working with Manganis assets in the linker. …\nCheck if the asset is minified\nCheck if the asset is minified\nCreate a new folder asset using the builder\nCreate a new image asset options\nCreate a new css asset using the builder\nCreate a new js asset builder\nGet the options for the asset\nCheck if the asset is preloaded\nCheck if the asset is preloaded\nCheck if the asset is preloaded\nReturn a canonicalized path to the asset\nGet the size of the image\nSets the format of the image to <code>ImageFormat::Avif</code>\nSets the format of the image\nSets the format of the image to <code>ImageFormat::Jpg</code>\nSets whether the css should be minified (default: true)\nSets whether the js should be minified (default: true)\nSets the format of the image to <code>ImageFormat::Png</code>\nMake the asset preloaded\nMake the asset preloaded\nMake the asset preloaded\nSets the size of the image\nSets the format of the image to <code>ImageFormat::Webp</code>\nThe height of the image in pixels\nThe width of the image in pixels\nThe opaque hash type manganis uses to identify assets. …\nAn error that can occur when hashing an asset\nAn io error occurred\nGet the hash bytes\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new asset hash for a file. The input file to this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe list of link sections for all supported platforms\nThe link section used on the current platform\nReturns the link section used in illumos\nInformation about the manganis link section for a given …\nReturns the link section used in macOS, iOS, tvOS\nReturns the link section used in linux, android, fuchsia, …\nReturns the link section used in windows\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe link section we pass to the static\nThe name of the section we find in the binary")