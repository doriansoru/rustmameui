searchState.loadedDescShard("dlopen2", 0, "Library for opening and working with dynamic link …\nAddress could not be matched to a dynamic link library\nThis is a library-specific error that is returned by all …\nProvided string could not be coverted into …\nValue of the symbol was null.\nThe library could not be opened.\nThe symbol could not be obtained.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLow-level API for opening and getting raw symbols from …\nHigh-level and safe API for opening and getting symbols …\nUtilities for working with dynamic link libraries.\nHigh-level and safe API for opening and getting symbols …\nContainer for information about an address obtained from …\nObtains information about an address previously loaded …\nMain interface for opening and working with a dynamic link …\nContainer for information about overlapping symbol from …\nOverlapping symbol address\nBase address of the library that is the source of this …\nPath to the library that is the source of this symbol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the raw OS handle for the opened library.\nOverlapping symbol name\nObtains information about an address previously loaded …\nOpen a dynamic library.\nOpen the main program itself as a library.\nOpen a dynamic library with flags\nInformation about the overlapping symbol from the dynamic …\nObtains a symbol from the opened library.\nEquivalent of the <code>symbol</code> method but takes <code>CStr</code> as a …\nContainer for both dynamic link library handle and its API.\nAllows conversion of raw symbol result into the given …\nSafe wrapper around dynamic link library handle.\nSafe wrapper around const pointer.\nSafe wrapper around mutable pointer.\nSafe wrapper around cont reference.\nSafe wrapper around mutable reference.\nTrait for automatic loading of symbols from library.\nSafe wrapper around a symbol obtained from <code>Library</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the raw OS handle for the opened library.\nReturns the raw OS handle for the opened library.\nOpen dynamic link library and load symbols.\nLoad all symbols from the program itself.\nOpen dynamic link library using provided file name or path.\nOpen the program itself as library.\nObtain a const pointer from library.\nEquivalent of the <code>pointer()</code> method but takes <code>CStr</code> as a …\nObtain a mutable pointer from library.\nEquivalent of the <code>pointer_mut()</code> method but takes <code>CStr</code> as a …\nObtain const reference to statically allocated data in the …\nEquivalent of the <code>reference()</code> method but takes <code>CStr</code> as a …\nObtain mutable reference to statically allocated data in …\nEquivalent of the <code>reference_mut()</code> method but takes <code>CStr</code> as …\nObtain a symbol from library.\nEquivalent of the <code>symbol()</code> method but takes <code>CStr</code> as a …\nDynamic link library file extension specific to the …\nThis is a platform-specific file prefix.\nCrates a platform-specific file name from provided core …\nContainer for both a dynamic load library handle and its …\nContainer for a library handle and both obligatory and …\nTrait for defining library API.\nAllows creation of complex, optional APIs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the raw OS handle for the opened library.\nLoad symbols from provided library.\nOpen the library using provided file name or path and load …\nOpens the library using provided file name or path and …\nLoad all symbols from the program itself.\nLoad all symbols (including optional if it is possible) …\nSame as load(), except specify flags used by libc::dlopen\nOpens the library using provided file name or path and …\nGives access to the optional API - constant version.\nGives access to the optional API - constant version.")