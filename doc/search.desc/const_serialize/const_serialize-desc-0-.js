searchState.loadedDescShard("const_serialize", 0, "A rust serialization library that works in const with …\nA buffer that can be read from at compile time. This is …\nA string that is stored in a constant sized buffer that …\n<code>ConstVec</code> is a version of <code>Vec</code> that is usable in const …\nAn enum layout\nThe layout for an enum. The enum layout is just a …\nThe layout for an enum variant. The enum variant layout is …\nThe layout for a type. This layout defines a sequence of …\nA list layout\nThe layout for a constant sized array. The array layout is …\nThe memory layout of the type. This type must have plain …\nA primitive layout\nThe layout for a primitive type. The bytes will be …\nA trait for types that can be serialized and deserialized …\nDerive the const serialize trait for a struct\nA struct layout\nPlain old data for a field. Stores the offset of the field …\nLayout for a struct. The struct layout is just a list of …\nAssert that the memory layout of the type is the same as …\nGet a reference to the underlying slice\nGet a reference to the underlying byte slice\nGet a reference to the string\nDeserialize a type into the output buffer. Accepts (Type, …\nDeserialize a buffer into a type. This will return None if …\nExtend the <code>ConstVec</code> with the contents of a slice\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the value at the given index\nGet the next byte from the buffer. Returns <code>None</code> if the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the <code>ConstVec</code> is empty\nCheck if the string is empty\nGet the length of the <code>ConstVec</code>\nGet the length of the string\nCreate a new empty <code>ConstVec</code>\nCreate a new buffer from a byte slice\nCreate a new struct field layout\nCreate a new struct layout\nCreate a new enum layout\nCreate a new enum variant layout\nCreate a new list layout\nCreate a new primitive layout\nCreate a new constant string\nCreate a new empty <code>ConstVec</code> with a custom maximum size\nPop a value off the end of the <code>ConstVec</code>\nPush a value onto the end of the <code>ConstVec</code>\nPush a character onto the string\nPush a str onto the string\nConvert the <code>ConstVec</code> into a <code>ConstReadBuffer</code>\nRemove the value at the given index\nSplit the string at the last occurrence of a character\nSerialize a type into a buffer\nCheck if the serialized representation of two items are …\nSet the value at the given index\nSplit the <code>ConstVec</code> into two at the given index\nSplit the string at a byte index. The byte index must be a …\nSplit the string at the first occurrence of a character\nSwap the values at the given indices")