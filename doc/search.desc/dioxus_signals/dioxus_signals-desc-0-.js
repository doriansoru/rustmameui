searchState.loadedDescShard("dioxus_signals", 0, "Dioxus Signals\nThe value was already borrowed.\nThe value was already borrowed mutably.\nThe value was already borrowed mutably.\nA trait for any storage backing type.\nAn error that can occur when trying to borrow a value.\nAn error that can occur when trying to borrow a value …\nCopyValue is a wrapper around a value to make the value …\nThe value was dropped.\nThe value was dropped.\nA key derived from a <code>std::panic::Location</code> type\nA lazy value that is created once per application and can …\nA key used to identify a signal in the global signal …\nThe context for global signals\nA memo that can be accessed from anywhere in the …\nA signal that can be accessed from anywhere in the …\nA trait for an item that can be constructed from an …\nA read only signal that has been mapped to a new type.\nMemos are the result of computing a value from <code>use_memo</code>.\nThe mutable reference this storage type returns.\nThe type of the reference.\nOwner: Handles dropping generational boxes. The owner acts …\nA raw key derived just from a string\nA signal that can only be read from.\nA signal that can only be read from.\nA trait for states that can be read from like <code>crate::Signal</code>…\nAn extension trait for Readable&lt;Option&gt; that provides some …\nA reference to a value that can be read from.\nAn extension trait for Readable&lt;Option&gt; that provides some …\nAn iterator over the values of a <code>Readable&lt;Vec&lt;T&gt;&gt;</code>.\nAn extension trait for Readable&lt;Vec&gt; that provides some …\nThe reference this storage type returns.\nAn object that can efficiently compare a value to a set of …\nSignals are a Copy state management solution with …\nThe data stored for tracking in a signal.\nA trait for a storage backing type. (RefCell, RwLock, etc.)\nThe type of the storage this readable uses.\nA signal that can safely shared between threads.\nA thread safe storage. This is slower than the unsync …\nThe target type of the reference.\nA unsync storage. This is the default storage type.\nA trait for states that can be written to like …\nAn extension trait for <code>Writable&lt;Option&lt;T&gt;&gt;</code>` that provides …\nA reference to a value that can be read from.\nAn iterator over the values of a <code>Writable&lt;Vec&lt;T&gt;&gt;</code>.\nAn extension trait for <code>Writable&lt;Vec&lt;T&gt;&gt;</code> that provides some …\nA mutable reference to a signal’s value. This reference …\nAttempts to write the inner value of the Option.\nAttempts to write the inner value of the Option.\nAttempts to read the inner value of the Option.\nAttempts to read the inner value of the Option.\nAttempts to read the inner value of the Option.\nAttempts to read the inner value of the Option.\nChange the reference a signal is pointing to\nClears the vector, removing all values.\nClears the vector, removing all values.\nClone the inner value and return it. If the value has been …\nClone the inner value and return it. If the value has been …\nGet the data pointer. No guarantees are made about the …\nThis macro is used to generate a <code>impl Default</code> block for …\nDowncast the lifetime of the mutable reference to the …\nDowncast a mutable reference in a RefMut to a more …\nDowncast a mutable reference in a RefMut to a more …\nDowncast a reference in a Ref to a more specific lifetime\nThis macro is used to generate <code>impl PartialEq</code> blocks for …\nReturns a signal which is true when the value is equal to …\nExtends the vector with the given iterator.\nExtends the vector with the given iterator.\nTry to map the mutable reference to the signal’s value …\nGet the first element of the inner vector.\nGet the first element of the inner vector.\nThis macro is used to generate <code>impl Display</code>, and <code>impl Debug</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the element at the given index of the inner vector.\nGet the element at the given index of the inner vector.\nGet the global context for signals\nTry to mutably get an element from the vector.\nTry to mutably get an element from the vector.\nGets the value out of the Option, or inserts the given …\nGets the value out of the Option, or inserts the given …\nGets the value out of the Option, or inserts the value …\nGets the value out of the Option, or inserts the value …\nGet a signal with the given string key The key will be …\nCreates a new <code>GlobalSignal</code> that can be used anywhere …\nCreates a new <code>GlobalMemo</code> that can be used anywhere inside …\nCreates a new <code>GlobalMemo</code> that can be used anywhere inside …\nGet the generational id of the value.\nGet the generational id of the signal.\nGet the id of the signal.\nGet the id of the signal.\nGet the generational id of the signal.\nGet the generational id of the signal.\nGet the generational id of the signal.\nGet the generational id of the signal.\nIndex into the inner value and return a reference to the …\nIndex into the inner value and return a reference to the …\nIndex into the inner value and return a reference to the …\nIndex into the inner value and return a reference to the …\nCreate an instance of this type from an initialization …\nInsert a value into the store. The value will be dropped …\nInserts a new value at the given index.\nInserts a new value at the given index.\nCreate a new reference counted box. The box will be …\nInsert a value into the store with a specific location …\nCreate a new reference to an existing box. The reference …\nInsert a value into the store with a specific location …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the inner vector is empty.\nReturns true if the inner vector is empty.\nGet an iterator over the values of the inner vector.\nGet an iterator over the values of the inner vector.\nGets an iterator over the values of the vector.\nGets an iterator over the values of the vector.\nGet the key for this global\nGet the last element of the inner vector.\nGet the last element of the inner vector.\nCreate a new CopyValue without an owner. This will leak …\nCreate a new Signal without an owner. This will leak …\nReturns the length of the inner vector.\nReturns the length of the inner vector.\nManually drop the value in the CopyValue, invalidating the …\nDrop the value out of the signal, invalidating the signal …\nMap the mutable reference to the signal’s value to a new …\nMap the ref.\nMap the readable type to a new type. This lets you provide …\nMap the readable type to a new type. This lets you provide …\nMap the reference to a new type.\nMap the mutable ref.\nCreates a new unsync Selector. The selector will be run …\nResolve the global memo. This will try to get the existing …\nResolve the global memo. This will try to get the existing …\nCreates a new unsync Selector with an explicit location. …\nCreate a new memory location. This will either create a …\nCreate a new CopyValue. The value will be stored in the …\nCreates a new <code>Signal</code>. Signals are a Copy state management …\nCreate a new read-only signal.\nCreate a new memo\nCreate a new global value\nCreates a new <code>SetCompare</code> which efficiently tracks when a …\nCreate a new key from a location\nCreate a new CopyValue. The value will be stored in the …\nCreate a new signal with a custom owner scope. The signal …\nCreate a new CopyValue. The value will be stored in the …\nCreates a new Signal. Signals are a Copy state management …\nCreate a new read-only signal that is maybe sync.\nCreates a new <code>SetCompare</code> that may be <code>Sync + Send</code> which …\nCreate a new CopyValue. The value will be stored in the …\nCreate a new signal with a custom owner scope. The signal …\nCreate a new CopyValue with a custom caller. The value …\nCreate a new signal with a custom owner scope and a custom …\nCreate a new reference counted memory location. This will …\nReference another location if the location is valid\nCreates a new Signal with an explicit caller. Signals are …\nCreate a new memo with an explicit location\nGet the scope this value was created in.\nGet the scope the signal was created in.\nGet the scope that the signal was created in.\nGet the scope that the signal was created in.\nGet the scope the signal was created in.\nCreate a new owner. The owner will be responsible for …\nGet the current value of the state without subscribing to …\nGet the current value of the state without subscribing to …\nGet the current value of the signal without checking the …\nGet the current value of the signal without checking the …\nPoint to another copy value\nPoint to another signal. This will subscribe the other …\nPoint to another signal\nPops the last value from the vector.\nPops the last value from the vector.\nPushes a new value to the end of the vector.\nPushes a new value to the end of the vector.\nGet the current value of the state. If this is a signal, …\nGet the current value of the state. If this is a signal, …\nThis macro is used to generate <code>impl Display</code>, <code>impl Debug</code>, …\nGet a reference to the value without checking the …\nGet a reference to the value without checking the …\nRecycle a memory location. This will drop the memory …\nRemoves the value at the given index.\nRemoves the value at the given index.\nReplace the value in the Signal, returning the old value.\nReplace the value in the Signal, returning the old value.\nResolve the global value. This will try to get the …\nRetains only the values that match the given predicate.\nRetains only the values that match the given predicate.\nSet the value of the signal. This will trigger an update …\nSet the value of the signal. This will trigger an update …\nResolve the global signal. This will try to get the …\nResolve the global signal. This will try to get the …\nSplits the vector into two at the given index.\nSplits the vector into two at the given index.\nSwaps two values in the vector.\nSwaps two values in the vector.\nTakes the value out of the Signal, leaving a Default in …\nTakes the value out of the Signal, leaving a Default in …\nInvert the boolean value of the signal. This will trigger …\nInvert the boolean value of the signal. This will trigger …\nTruncates the vector to the given length.\nTruncates the vector to the given length.\nTry to map the ref.\nTry to map the mutable ref.\nTry to map the reference to a new type.\nTry to peek the current value of the signal without …\nTry to peek the current value of the signal without …\nTry to peek the current value of the signal without …\nGet the current value of the signal. <strong>Unlike read, this </strong>…\nGet the current value of the signal. <strong>Unlike read, this </strong>…\nGet the current value of the signal. <strong>Unlike read, this </strong>…\nTry to read the value. Returns None if the value is no …\nTry to get the current value of the state. If this is a …\nTry to get the current value of the state. If this is a …\nTry to get a reference to the value without checking the …\nTry to write the value. Returns None if the value is no …\nTry to get a mutable reference to the value.\nTry to get a mutable reference to the value.\nTry to get a mutable reference to the value without …\nUnwraps the inner value and clones it.\nUnwraps the inner value and clones it.\nUnwraps the inner value and clones it.\nUnwraps the inner value and clones it.\nGet the underlying <code>GenerationalBox</code> value.\nWarnings that can be triggered by suspicious usage of …\nRun a function with a reference to the value. If the value …\nRun a function with a reference to the value. If the value …\nCreate this global signal with a specific key. This is …\nRun a closure with a mutable reference to the signal’s …\nRun a function with a mutable reference to the value. If …\nRun a function with a mutable reference to the value. If …\nCreate this global signal with a specific key. This is …\nRun a function with a reference to the value. If the value …\nRun a function with a reference to the value. If the value …\nWrite this value\nGet a mutable reference to the value. If the value has …\nGet a mutable reference to the value. If the value has …\nThis macro is used to generate <code>impl Add</code>, <code>impl AddAssign</code>, …\n<strong>This pattern is no longer recommended. Prefer <code>peek</code> or </strong>…\nGet a mutable reference to the value without checking the …\nGet a mutable reference to the value without checking the …\nThe column number\nThe file name\nThe index of the signal in the file - used to disambiguate …\nThe line number\nA warning that is triggered when a copy value is used in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the write happened during a scope that the signal …\nCheck if the write happened during a render. If it did, …")