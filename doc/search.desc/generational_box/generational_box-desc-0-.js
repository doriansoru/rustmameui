searchState.loadedDescShard("generational_box", 0, "Generational Box\nThe value was already borrowed.\nAn error that can occur when trying to borrow a value …\nThe value was already borrowed mutably.\nThe value was already borrowed mutably.\nAn error that can occur when trying to borrow a value that …\nA trait for any storage backing type.\nAn error that can occur when trying to borrow a value.\nAn error that can occur when trying to borrow a value …\nA result that can be returned from a borrow mut operation.\nA result that can be returned from a borrow operation.\nThe value was dropped.\nThe value was dropped.\nContains the error value\nContains the error value\nThe core Copy state type. The generational box will be …\nThe type erased id of a generational box.\nA pointer to a specific generational box and generation in …\nA reference to a value in a generational box. This …\nA mutable reference to a value in a generational box. This …\nThe mutable reference this storage type returns.\nContains the success value\nContains the success value\nOwner: Handles dropping generational boxes. The owner acts …\nThe reference this storage type returns.\nA trait for a storage backing type. (RefCell, RwLock, etc.)\nA thread safe storage. This is slower than the unsync …\nA unsync storage. This is the default storage type.\nAn error that can occur when trying to use a value that …\nChange the reference a signal is pointing to\nTry to get the location the generational box was created …\nGet the data pointer. No guarantees are made about the …\nDowncast a mutable reference in a RefMut to a more …\nDowncast a reference in a Ref to a more specific lifetime\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the id of the generational box.\nInsert a value into the store. The value will be dropped …\nCreate a new reference counted box. The box will be …\nInsert a value into the store with a specific location …\nCreate a new reference to an existing box. The reference …\nInsert a value into the store with a specific location …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new generational box by leaking a value into the …\nCreate a new reference counted generational box by leaking …\nGet a reference to the value\nDrop the value out of the generational box and invalidate …\nMap the inner value to a new type\nMap the inner value to a new type\nMap the ref.\nMap the mutable ref.\nCreate a new memory location. This will either create a …\nCreate a new <code>ValueDroppedError</code>.\nCreate a new <code>AlreadyBorrowedMutError</code>.\nCreate a new <code>AlreadyBorrowedError</code>.\nCreate a new reference counted memory location. This will …\nReference another location if the location is valid\nCreate a new owner. The owner will be responsible for …\nChange this box to point to another generational box\nReturns true if the pointer is equal to the other pointer.\nGet the raw pointer to the value.\nRead the value. Panics if the value is no longer valid.\nRecycle a memory location. This will drop the memory …\nSet the value. Panics if the value is no longer valid.\nTry to map the ref.\nTry to map the inner value to a new type\nTry to map the inner value to a new type\nTry to map the mutable ref.\nTry to read the value. Returns None if the value is no …\nTry to read the value. Returns an error if the value is no …\nTry to write the value. Returns None if the value is no …\nTry to write the value. Returns None if the value is no …\nWrite the value. Panics if the value is no longer valid.")